// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: demand.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	EcommerceService_MakeDemand_FullMethodName = "/addDemand.EcommerceService/MakeDemand"
)

// EcommerceServiceClient is the client API for EcommerceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EcommerceServiceClient interface {
	MakeDemand(ctx context.Context, in *DemandRequest, opts ...grpc.CallOption) (*DemandResponse, error)
}

type ecommerceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEcommerceServiceClient(cc grpc.ClientConnInterface) EcommerceServiceClient {
	return &ecommerceServiceClient{cc}
}

func (c *ecommerceServiceClient) MakeDemand(ctx context.Context, in *DemandRequest, opts ...grpc.CallOption) (*DemandResponse, error) {
	out := new(DemandResponse)
	err := c.cc.Invoke(ctx, EcommerceService_MakeDemand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EcommerceServiceServer is the server API for EcommerceService service.
// All implementations must embed UnimplementedEcommerceServiceServer
// for forward compatibility
type EcommerceServiceServer interface {
	MakeDemand(context.Context, *DemandRequest) (*DemandResponse, error)
	mustEmbedUnimplementedEcommerceServiceServer()
}

// UnimplementedEcommerceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEcommerceServiceServer struct {
}

func (UnimplementedEcommerceServiceServer) MakeDemand(context.Context, *DemandRequest) (*DemandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeDemand not implemented")
}
func (UnimplementedEcommerceServiceServer) mustEmbedUnimplementedEcommerceServiceServer() {}

// UnsafeEcommerceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EcommerceServiceServer will
// result in compilation errors.
type UnsafeEcommerceServiceServer interface {
	mustEmbedUnimplementedEcommerceServiceServer()
}

func RegisterEcommerceServiceServer(s grpc.ServiceRegistrar, srv EcommerceServiceServer) {
	s.RegisterService(&EcommerceService_ServiceDesc, srv)
}

func _EcommerceService_MakeDemand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EcommerceServiceServer).MakeDemand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EcommerceService_MakeDemand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EcommerceServiceServer).MakeDemand(ctx, req.(*DemandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EcommerceService_ServiceDesc is the grpc.ServiceDesc for EcommerceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EcommerceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "addDemand.EcommerceService",
	HandlerType: (*EcommerceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeDemand",
			Handler:    _EcommerceService_MakeDemand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demand.proto",
}
